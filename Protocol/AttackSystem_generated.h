// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTACKSYSTEM_PACKETS_H_
#define FLATBUFFERS_GENERATED_ATTACKSYSTEM_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "BaseStructures_generated.h"
#include "Enums_generated.h"

namespace Packets {

struct FireProjectileSC;
struct FireProjectileSCBuilder;

struct ProjectileMoveSC;
struct ProjectileMoveSCBuilder;

struct RequestAttackCS;
struct RequestAttackCSBuilder;

struct RequestFireCS;
struct RequestFireCSBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct FireProjectileSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FireProjectileSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTID = 4,
    VT_DIR = 6,
    VT_STARTPOS = 8,
    VT_STARTSPEED = 10,
    VT_PROJECTILETYPE = 12
  };
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  const Packets::Vec3 *dir() const {
    return GetStruct<const Packets::Vec3 *>(VT_DIR);
  }
  const Packets::Vec3 *startPos() const {
    return GetStruct<const Packets::Vec3 *>(VT_STARTPOS);
  }
  float startSpeed() const {
    return GetField<float>(VT_STARTSPEED, 0.0f);
  }
  Packets::ProjectileTypes projectileType() const {
    return static_cast<Packets::ProjectileTypes>(GetField<uint8_t>(VT_PROJECTILETYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<Packets::Vec3>(verifier, VT_DIR, 4) &&
           VerifyField<Packets::Vec3>(verifier, VT_STARTPOS, 4) &&
           VerifyField<float>(verifier, VT_STARTSPEED, 4) &&
           VerifyField<uint8_t>(verifier, VT_PROJECTILETYPE, 1) &&
           verifier.EndTable();
  }
};

struct FireProjectileSCBuilder {
  typedef FireProjectileSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(FireProjectileSC::VT_OBJECTID, objectId, 0);
  }
  void add_dir(const Packets::Vec3 *dir) {
    fbb_.AddStruct(FireProjectileSC::VT_DIR, dir);
  }
  void add_startPos(const Packets::Vec3 *startPos) {
    fbb_.AddStruct(FireProjectileSC::VT_STARTPOS, startPos);
  }
  void add_startSpeed(float startSpeed) {
    fbb_.AddElement<float>(FireProjectileSC::VT_STARTSPEED, startSpeed, 0.0f);
  }
  void add_projectileType(Packets::ProjectileTypes projectileType) {
    fbb_.AddElement<uint8_t>(FireProjectileSC::VT_PROJECTILETYPE, static_cast<uint8_t>(projectileType), 0);
  }
  explicit FireProjectileSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FireProjectileSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FireProjectileSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FireProjectileSC> CreateFireProjectileSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t objectId = 0,
    const Packets::Vec3 *dir = nullptr,
    const Packets::Vec3 *startPos = nullptr,
    float startSpeed = 0.0f,
    Packets::ProjectileTypes projectileType = Packets::ProjectileTypes_ARROW) {
  FireProjectileSCBuilder builder_(_fbb);
  builder_.add_startSpeed(startSpeed);
  builder_.add_startPos(startPos);
  builder_.add_dir(dir);
  builder_.add_objectId(objectId);
  builder_.add_projectileType(projectileType);
  return builder_.Finish();
}

struct ProjectileMoveSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProjectileMoveSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTID = 4,
    VT_POS = 6,
    VT_DIR = 8,
    VT_SPEED = 10
  };
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  const Packets::Vec3 *pos() const {
    return GetStruct<const Packets::Vec3 *>(VT_POS);
  }
  const Packets::Vec3 *dir() const {
    return GetStruct<const Packets::Vec3 *>(VT_DIR);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<Packets::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<Packets::Vec3>(verifier, VT_DIR, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           verifier.EndTable();
  }
};

struct ProjectileMoveSCBuilder {
  typedef ProjectileMoveSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ProjectileMoveSC::VT_OBJECTID, objectId, 0);
  }
  void add_pos(const Packets::Vec3 *pos) {
    fbb_.AddStruct(ProjectileMoveSC::VT_POS, pos);
  }
  void add_dir(const Packets::Vec3 *dir) {
    fbb_.AddStruct(ProjectileMoveSC::VT_DIR, dir);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(ProjectileMoveSC::VT_SPEED, speed, 0.0f);
  }
  explicit ProjectileMoveSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProjectileMoveSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProjectileMoveSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProjectileMoveSC> CreateProjectileMoveSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t objectId = 0,
    const Packets::Vec3 *pos = nullptr,
    const Packets::Vec3 *dir = nullptr,
    float speed = 0.0f) {
  ProjectileMoveSCBuilder builder_(_fbb);
  builder_.add_speed(speed);
  builder_.add_dir(dir);
  builder_.add_pos(pos);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct RequestAttackCS FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestAttackCSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIR = 4
  };
  const Packets::Vec3 *dir() const {
    return GetStruct<const Packets::Vec3 *>(VT_DIR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Packets::Vec3>(verifier, VT_DIR, 4) &&
           verifier.EndTable();
  }
};

struct RequestAttackCSBuilder {
  typedef RequestAttackCS Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dir(const Packets::Vec3 *dir) {
    fbb_.AddStruct(RequestAttackCS::VT_DIR, dir);
  }
  explicit RequestAttackCSBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestAttackCS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestAttackCS>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestAttackCS> CreateRequestAttackCS(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Packets::Vec3 *dir = nullptr) {
  RequestAttackCSBuilder builder_(_fbb);
  builder_.add_dir(dir);
  return builder_.Finish();
}

struct RequestFireCS FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestFireCSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIR = 4,
    VT_PROJECTILETYPE = 6
  };
  const Packets::Vec3 *dir() const {
    return GetStruct<const Packets::Vec3 *>(VT_DIR);
  }
  Packets::ProjectileTypes projectileType() const {
    return static_cast<Packets::ProjectileTypes>(GetField<uint8_t>(VT_PROJECTILETYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Packets::Vec3>(verifier, VT_DIR, 4) &&
           VerifyField<uint8_t>(verifier, VT_PROJECTILETYPE, 1) &&
           verifier.EndTable();
  }
};

struct RequestFireCSBuilder {
  typedef RequestFireCS Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dir(const Packets::Vec3 *dir) {
    fbb_.AddStruct(RequestFireCS::VT_DIR, dir);
  }
  void add_projectileType(Packets::ProjectileTypes projectileType) {
    fbb_.AddElement<uint8_t>(RequestFireCS::VT_PROJECTILETYPE, static_cast<uint8_t>(projectileType), 0);
  }
  explicit RequestFireCSBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestFireCS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestFireCS>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestFireCS> CreateRequestFireCS(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Packets::Vec3 *dir = nullptr,
    Packets::ProjectileTypes projectileType = Packets::ProjectileTypes_ARROW) {
  RequestFireCSBuilder builder_(_fbb);
  builder_.add_dir(dir);
  builder_.add_projectileType(projectileType);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_ATTACKSYSTEM_PACKETS_H_
