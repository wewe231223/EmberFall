// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEMS_PACKETS_H_
#define FLATBUFFERS_GENERATED_ITEMS_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "BaseStructures_generated.h"
#include "Enums_generated.h"

namespace Packets {

struct RequestUseItemCS;
struct RequestUseItemCSBuilder;

struct UseItemSC;
struct UseItemSCBuilder;

struct AcquiredItemSC;
struct AcquiredItemSCBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct RequestUseItemCS FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestUseItemCSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM = 4
  };
  Packets::ItemType item() const {
    return static_cast<Packets::ItemType>(GetField<uint8_t>(VT_ITEM, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ITEM, 1) &&
           verifier.EndTable();
  }
};

struct RequestUseItemCSBuilder {
  typedef RequestUseItemCS Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item(Packets::ItemType item) {
    fbb_.AddElement<uint8_t>(RequestUseItemCS::VT_ITEM, static_cast<uint8_t>(item), 0);
  }
  explicit RequestUseItemCSBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestUseItemCS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestUseItemCS>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestUseItemCS> CreateRequestUseItemCS(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Packets::ItemType item = Packets::ItemType_POTION) {
  RequestUseItemCSBuilder builder_(_fbb);
  builder_.add_item(item);
  return builder_.Finish();
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct UseItemSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UseItemSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4,
    VT_ITEM = 6
  };
  uint8_t playerId() const {
    return GetField<uint8_t>(VT_PLAYERID, 0);
  }
  Packets::ItemType item() const {
    return static_cast<Packets::ItemType>(GetField<uint8_t>(VT_ITEM, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLAYERID, 1) &&
           VerifyField<uint8_t>(verifier, VT_ITEM, 1) &&
           verifier.EndTable();
  }
};

struct UseItemSCBuilder {
  typedef UseItemSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playerId(uint8_t playerId) {
    fbb_.AddElement<uint8_t>(UseItemSC::VT_PLAYERID, playerId, 0);
  }
  void add_item(Packets::ItemType item) {
    fbb_.AddElement<uint8_t>(UseItemSC::VT_ITEM, static_cast<uint8_t>(item), 0);
  }
  explicit UseItemSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UseItemSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UseItemSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UseItemSC> CreateUseItemSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t playerId = 0,
    Packets::ItemType item = Packets::ItemType_POTION) {
  UseItemSCBuilder builder_(_fbb);
  builder_.add_item(item);
  builder_.add_playerId(playerId);
  return builder_.Finish();
}

struct AcquiredItemSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AcquiredItemSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4,
    VT_ITEM = 6
  };
  uint8_t playerId() const {
    return GetField<uint8_t>(VT_PLAYERID, 0);
  }
  Packets::ItemType item() const {
    return static_cast<Packets::ItemType>(GetField<uint8_t>(VT_ITEM, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLAYERID, 1) &&
           VerifyField<uint8_t>(verifier, VT_ITEM, 1) &&
           verifier.EndTable();
  }
};

struct AcquiredItemSCBuilder {
  typedef AcquiredItemSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playerId(uint8_t playerId) {
    fbb_.AddElement<uint8_t>(AcquiredItemSC::VT_PLAYERID, playerId, 0);
  }
  void add_item(Packets::ItemType item) {
    fbb_.AddElement<uint8_t>(AcquiredItemSC::VT_ITEM, static_cast<uint8_t>(item), 0);
  }
  explicit AcquiredItemSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AcquiredItemSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AcquiredItemSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AcquiredItemSC> CreateAcquiredItemSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t playerId = 0,
    Packets::ItemType item = Packets::ItemType_POTION) {
  AcquiredItemSCBuilder builder_(_fbb);
  builder_.add_item(item);
  builder_.add_playerId(playerId);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_ITEMS_PACKETS_H_
