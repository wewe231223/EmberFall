// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMONOBJECTS_PACKETS_H_
#define FLATBUFFERS_GENERATED_COMMONOBJECTS_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "PacketHeader_generated.h"

namespace Packets {

struct ObjectAppearedSC;
struct ObjectAppearedSCBuilder;

struct ObjectDisappearedSC;
struct ObjectDisappearedSCBuilder;

struct ObjectRemovedSC;
struct ObjectRemovedSCBuilder;

struct ObjectMoveSC;
struct ObjectMoveSCBuilder;

struct ObjectAttackedSC;
struct ObjectAttackedSCBuilder;

struct ObjectAnimationChangedSC;
struct ObjectAnimationChangedSCBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct ObjectAppearedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectAppearedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_ANIMATION = 8,
    VT_HP = 10,
    VT_POS = 12
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  Packets::AnimationState animation() const {
    return static_cast<Packets::AnimationState>(GetField<uint8_t>(VT_ANIMATION, 0));
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  const Packets::Vec3 *pos() const {
    return GetPointer<const Packets::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<uint8_t>(verifier, VT_ANIMATION, 1) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           verifier.EndTable();
  }
};

struct ObjectAppearedSCBuilder {
  typedef ObjectAppearedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectAppearedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectAppearedSC::VT_OBJECTID, objectId, 0);
  }
  void add_animation(Packets::AnimationState animation) {
    fbb_.AddElement<uint8_t>(ObjectAppearedSC::VT_ANIMATION, static_cast<uint8_t>(animation), 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(ObjectAppearedSC::VT_HP, hp, 0.0f);
  }
  void add_pos(::flatbuffers::Offset<Packets::Vec3> pos) {
    fbb_.AddOffset(ObjectAppearedSC::VT_POS, pos);
  }
  explicit ObjectAppearedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectAppearedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectAppearedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectAppearedSC> CreateObjectAppearedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    Packets::AnimationState animation = Packets::AnimationState_IDLE,
    float hp = 0.0f,
    ::flatbuffers::Offset<Packets::Vec3> pos = 0) {
  ObjectAppearedSCBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  builder_.add_animation(animation);
  return builder_.Finish();
}

struct ObjectDisappearedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectDisappearedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           verifier.EndTable();
  }
};

struct ObjectDisappearedSCBuilder {
  typedef ObjectDisappearedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectDisappearedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectDisappearedSC::VT_OBJECTID, objectId, 0);
  }
  explicit ObjectDisappearedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectDisappearedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectDisappearedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectDisappearedSC> CreateObjectDisappearedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0) {
  ObjectDisappearedSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct ObjectRemovedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectRemovedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           verifier.EndTable();
  }
};

struct ObjectRemovedSCBuilder {
  typedef ObjectRemovedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectRemovedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectRemovedSC::VT_OBJECTID, objectId, 0);
  }
  explicit ObjectRemovedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectRemovedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectRemovedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectRemovedSC> CreateObjectRemovedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0) {
  ObjectRemovedSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct ObjectMoveSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectMoveSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_POS = 8,
    VT_DIR = 10,
    VT_SPEED = 12
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  const Packets::Vec3 *pos() const {
    return GetPointer<const Packets::Vec3 *>(VT_POS);
  }
  const Packets::Vec3 *dir() const {
    return GetPointer<const Packets::Vec3 *>(VT_DIR);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIR) &&
           verifier.VerifyTable(dir()) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           verifier.EndTable();
  }
};

struct ObjectMoveSCBuilder {
  typedef ObjectMoveSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectMoveSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectMoveSC::VT_OBJECTID, objectId, 0);
  }
  void add_pos(::flatbuffers::Offset<Packets::Vec3> pos) {
    fbb_.AddOffset(ObjectMoveSC::VT_POS, pos);
  }
  void add_dir(::flatbuffers::Offset<Packets::Vec3> dir) {
    fbb_.AddOffset(ObjectMoveSC::VT_DIR, dir);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(ObjectMoveSC::VT_SPEED, speed, 0.0f);
  }
  explicit ObjectMoveSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectMoveSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectMoveSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectMoveSC> CreateObjectMoveSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    ::flatbuffers::Offset<Packets::Vec3> pos = 0,
    ::flatbuffers::Offset<Packets::Vec3> dir = 0,
    float speed = 0.0f) {
  ObjectMoveSCBuilder builder_(_fbb);
  builder_.add_speed(speed);
  builder_.add_dir(dir);
  builder_.add_pos(pos);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct ObjectAttackedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectAttackedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_HP = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           verifier.EndTable();
  }
};

struct ObjectAttackedSCBuilder {
  typedef ObjectAttackedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectAttackedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectAttackedSC::VT_OBJECTID, objectId, 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(ObjectAttackedSC::VT_HP, hp, 0.0f);
  }
  explicit ObjectAttackedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectAttackedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectAttackedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectAttackedSC> CreateObjectAttackedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    float hp = 0.0f) {
  ObjectAttackedSCBuilder builder_(_fbb);
  builder_.add_hp(hp);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct ObjectAnimationChangedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectAnimationChangedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_ANIMATION = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  Packets::AnimationState animation() const {
    return static_cast<Packets::AnimationState>(GetField<uint8_t>(VT_ANIMATION, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<uint8_t>(verifier, VT_ANIMATION, 1) &&
           verifier.EndTable();
  }
};

struct ObjectAnimationChangedSCBuilder {
  typedef ObjectAnimationChangedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(ObjectAnimationChangedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(ObjectAnimationChangedSC::VT_OBJECTID, objectId, 0);
  }
  void add_animation(Packets::AnimationState animation) {
    fbb_.AddElement<uint8_t>(ObjectAnimationChangedSC::VT_ANIMATION, static_cast<uint8_t>(animation), 0);
  }
  explicit ObjectAnimationChangedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectAnimationChangedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectAnimationChangedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectAnimationChangedSC> CreateObjectAnimationChangedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    Packets::AnimationState animation = Packets::AnimationState_IDLE) {
  ObjectAnimationChangedSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  builder_.add_animation(animation);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_COMMONOBJECTS_PACKETS_H_
