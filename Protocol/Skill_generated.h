// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SKILL_PACKETS_H_
#define FLATBUFFERS_GENERATED_SKILL_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "BaseStructures_generated.h"
#include "Enums_generated.h"

namespace Packets {

struct BuffHealSC;
struct BuffHealSCBuilder;

struct BuffHealSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffHealSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HP = 4
  };
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           verifier.EndTable();
  }
};

struct BuffHealSCBuilder {
  typedef BuffHealSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_hp(float hp) {
    fbb_.AddElement<float>(BuffHealSC::VT_HP, hp, 0.0f);
  }
  explicit BuffHealSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BuffHealSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BuffHealSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BuffHealSC> CreateBuffHealSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float hp = 0.0f) {
  BuffHealSCBuilder builder_(_fbb);
  builder_.add_hp(hp);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_SKILL_PACKETS_H_
