// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKETHEADER_PACKETS_H_
#define FLATBUFFERS_GENERATED_PACKETHEADER_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "BaseStructures_generated.h"
#include "Enums_generated.h"

namespace Packets {

struct PacketHeaderSC;
struct PacketHeaderSCBuilder;

struct PacketHeaderCS;
struct PacketHeaderCSBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct PacketHeaderSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketHeaderSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_TYPE = 6
  };
  int16_t size() const {
    return GetField<int16_t>(VT_SIZE, 0);
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SIZE, 2) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct PacketHeaderSCBuilder {
  typedef PacketHeaderSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(int16_t size) {
    fbb_.AddElement<int16_t>(PacketHeaderSC::VT_SIZE, size, 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(PacketHeaderSC::VT_TYPE, type, 0);
  }
  explicit PacketHeaderSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PacketHeaderSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PacketHeaderSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PacketHeaderSC> CreatePacketHeaderSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t size = 0,
    uint8_t type = 0) {
  PacketHeaderSCBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_type(type);
  return builder_.Finish();
}

struct PacketHeaderCS FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketHeaderCSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_TYPE = 6,
    VT_ID = 8
  };
  int16_t size() const {
    return GetField<int16_t>(VT_SIZE, 0);
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SIZE, 2) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_ID, 1) &&
           verifier.EndTable();
  }
};

struct PacketHeaderCSBuilder {
  typedef PacketHeaderCS Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(int16_t size) {
    fbb_.AddElement<int16_t>(PacketHeaderCS::VT_SIZE, size, 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(PacketHeaderCS::VT_TYPE, type, 0);
  }
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(PacketHeaderCS::VT_ID, id, 0);
  }
  explicit PacketHeaderCSBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PacketHeaderCS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PacketHeaderCS>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PacketHeaderCS> CreatePacketHeaderCS(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t size = 0,
    uint8_t type = 0,
    uint8_t id = 0) {
  PacketHeaderCSBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_PACKETHEADER_PACKETS_H_
