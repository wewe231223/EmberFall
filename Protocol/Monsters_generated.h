// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERS_PACKETS_H_
#define FLATBUFFERS_GENERATED_MONSTERS_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "PacketHeader_generated.h"

namespace Packets {

struct MonsterMoveSC;
struct MonsterMoveSCBuilder;

struct MonsterAppearedSC;
struct MonsterAppearedSCBuilder;

struct MonsterRemoveSC;
struct MonsterRemoveSCBuilder;

struct MonsterAttackedSC;
struct MonsterAttackedSCBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct MonsterMoveSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterMoveSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_POS = 8,
    VT_DIR = 10,
    VT_SPEED = 12
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  const Packets::Vec3 *pos() const {
    return GetPointer<const Packets::Vec3 *>(VT_POS);
  }
  const Packets::Vec3 *dir() const {
    return GetPointer<const Packets::Vec3 *>(VT_DIR);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           VerifyOffset(verifier, VT_DIR) &&
           verifier.VerifyTable(dir()) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           verifier.EndTable();
  }
};

struct MonsterMoveSCBuilder {
  typedef MonsterMoveSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(MonsterMoveSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(MonsterMoveSC::VT_OBJECTID, objectId, 0);
  }
  void add_pos(::flatbuffers::Offset<Packets::Vec3> pos) {
    fbb_.AddOffset(MonsterMoveSC::VT_POS, pos);
  }
  void add_dir(::flatbuffers::Offset<Packets::Vec3> dir) {
    fbb_.AddOffset(MonsterMoveSC::VT_DIR, dir);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(MonsterMoveSC::VT_SPEED, speed, 0.0f);
  }
  explicit MonsterMoveSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterMoveSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterMoveSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterMoveSC> CreateMonsterMoveSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    ::flatbuffers::Offset<Packets::Vec3> pos = 0,
    ::flatbuffers::Offset<Packets::Vec3> dir = 0,
    float speed = 0.0f) {
  MonsterMoveSCBuilder builder_(_fbb);
  builder_.add_speed(speed);
  builder_.add_dir(dir);
  builder_.add_pos(pos);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct MonsterAppearedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterAppearedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_ANIMATION = 8,
    VT_HP = 10,
    VT_POS = 12
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  Packets::AnimationState animation() const {
    return static_cast<Packets::AnimationState>(GetField<uint8_t>(VT_ANIMATION, 0));
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  const Packets::Vec3 *pos() const {
    return GetPointer<const Packets::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<uint8_t>(verifier, VT_ANIMATION, 1) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           verifier.EndTable();
  }
};

struct MonsterAppearedSCBuilder {
  typedef MonsterAppearedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(MonsterAppearedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(MonsterAppearedSC::VT_OBJECTID, objectId, 0);
  }
  void add_animation(Packets::AnimationState animation) {
    fbb_.AddElement<uint8_t>(MonsterAppearedSC::VT_ANIMATION, static_cast<uint8_t>(animation), 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(MonsterAppearedSC::VT_HP, hp, 0.0f);
  }
  void add_pos(::flatbuffers::Offset<Packets::Vec3> pos) {
    fbb_.AddOffset(MonsterAppearedSC::VT_POS, pos);
  }
  explicit MonsterAppearedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterAppearedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterAppearedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterAppearedSC> CreateMonsterAppearedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    Packets::AnimationState animation = Packets::AnimationState_IDLE,
    float hp = 0.0f,
    ::flatbuffers::Offset<Packets::Vec3> pos = 0) {
  MonsterAppearedSCBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  builder_.add_animation(animation);
  return builder_.Finish();
}

struct MonsterRemoveSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterRemoveSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           verifier.EndTable();
  }
};

struct MonsterRemoveSCBuilder {
  typedef MonsterRemoveSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(MonsterRemoveSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(MonsterRemoveSC::VT_OBJECTID, objectId, 0);
  }
  explicit MonsterRemoveSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterRemoveSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterRemoveSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterRemoveSC> CreateMonsterRemoveSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0) {
  MonsterRemoveSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct MonsterAttackedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterAttackedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_REDUCEHP = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  float reduceHP() const {
    return GetField<float>(VT_REDUCEHP, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<float>(verifier, VT_REDUCEHP, 4) &&
           verifier.EndTable();
  }
};

struct MonsterAttackedSCBuilder {
  typedef MonsterAttackedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(MonsterAttackedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(MonsterAttackedSC::VT_OBJECTID, objectId, 0);
  }
  void add_reduceHP(float reduceHP) {
    fbb_.AddElement<float>(MonsterAttackedSC::VT_REDUCEHP, reduceHP, 0.0f);
  }
  explicit MonsterAttackedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterAttackedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterAttackedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterAttackedSC> CreateMonsterAttackedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    float reduceHP = 0.0f) {
  MonsterAttackedSCBuilder builder_(_fbb);
  builder_.add_reduceHP(reduceHP);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_MONSTERS_PACKETS_H_
