// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CORRUPTEDGEM_PACKETS_H_
#define FLATBUFFERS_GENERATED_CORRUPTEDGEM_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

#include "PacketHeader_generated.h"

namespace Packets {

struct GemInteractSC;
struct GemInteractSCBuilder;

struct GemInteractionCancelSC;
struct GemInteractionCancelSCBuilder;

struct GemDestroyedSC;
struct GemDestroyedSCBuilder;

struct GemRemoveSC;
struct GemRemoveSCBuilder;

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
struct GemInteractSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GemInteractSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_PLAYERID = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  uint8_t playerId() const {
    return GetField<uint8_t>(VT_PLAYERID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyField<uint8_t>(verifier, VT_PLAYERID, 1) &&
           verifier.EndTable();
  }
};

struct GemInteractSCBuilder {
  typedef GemInteractSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(GemInteractSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(GemInteractSC::VT_OBJECTID, objectId, 0);
  }
  void add_playerId(uint8_t playerId) {
    fbb_.AddElement<uint8_t>(GemInteractSC::VT_PLAYERID, playerId, 0);
  }
  explicit GemInteractSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GemInteractSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GemInteractSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GemInteractSC> CreateGemInteractSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    uint8_t playerId = 0) {
  GemInteractSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  builder_.add_playerId(playerId);
  return builder_.Finish();
}

struct GemInteractionCancelSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GemInteractionCancelSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_PLAYERID = 6,
    VT_OBJECTID = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint8_t playerId() const {
    return GetField<uint8_t>(VT_PLAYERID, 0);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint8_t>(verifier, VT_PLAYERID, 1) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           verifier.EndTable();
  }
};

struct GemInteractionCancelSCBuilder {
  typedef GemInteractionCancelSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(GemInteractionCancelSC::VT_HEADER, header);
  }
  void add_playerId(uint8_t playerId) {
    fbb_.AddElement<uint8_t>(GemInteractionCancelSC::VT_PLAYERID, playerId, 0);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(GemInteractionCancelSC::VT_OBJECTID, objectId, 0);
  }
  explicit GemInteractionCancelSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GemInteractionCancelSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GemInteractionCancelSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GemInteractionCancelSC> CreateGemInteractionCancelSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint8_t playerId = 0,
    uint16_t objectId = 0) {
  GemInteractionCancelSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  builder_.add_playerId(playerId);
  return builder_.Finish();
}

struct GemDestroyedSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GemDestroyedSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6,
    VT_POS = 8
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  const Packets::Vec3 *pos() const {
    return GetPointer<const Packets::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyTable(pos()) &&
           verifier.EndTable();
  }
};

struct GemDestroyedSCBuilder {
  typedef GemDestroyedSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(GemDestroyedSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(GemDestroyedSC::VT_OBJECTID, objectId, 0);
  }
  void add_pos(::flatbuffers::Offset<Packets::Vec3> pos) {
    fbb_.AddOffset(GemDestroyedSC::VT_POS, pos);
  }
  explicit GemDestroyedSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GemDestroyedSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GemDestroyedSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GemDestroyedSC> CreateGemDestroyedSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0,
    ::flatbuffers::Offset<Packets::Vec3> pos = 0) {
  GemDestroyedSCBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

struct GemRemoveSC FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GemRemoveSCBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_OBJECTID = 6
  };
  const Packets::PacketHeaderSC *header() const {
    return GetPointer<const Packets::PacketHeaderSC *>(VT_HEADER);
  }
  uint16_t objectId() const {
    return GetField<uint16_t>(VT_OBJECTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTID, 2) &&
           verifier.EndTable();
  }
};

struct GemRemoveSCBuilder {
  typedef GemRemoveSC Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<Packets::PacketHeaderSC> header) {
    fbb_.AddOffset(GemRemoveSC::VT_HEADER, header);
  }
  void add_objectId(uint16_t objectId) {
    fbb_.AddElement<uint16_t>(GemRemoveSC::VT_OBJECTID, objectId, 0);
  }
  explicit GemRemoveSCBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GemRemoveSC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GemRemoveSC>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GemRemoveSC> CreateGemRemoveSC(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Packets::PacketHeaderSC> header = 0,
    uint16_t objectId = 0) {
  GemRemoveSCBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_objectId(objectId);
  return builder_.Finish();
}

}  // namespace Packets

#endif  // FLATBUFFERS_GENERATED_CORRUPTEDGEM_PACKETS_H_
